foreign import print_tupleIntIntList : List (Int, Int) -> ()
foreign import create_histogram : Int -> List Int -> List (Int, Int)
foreign import record_start_time : () -> ()
foreign import record_end_time : () -> ()
foreign import print_elapsed_time : () -> ()
foreign import print_int : Int -> ()

data List a where
  Nil : List a
  Cons : a -> List a -> List a

increment : Int -> List (Int, Int) -> List (Int, Int)
increment key xs = case xs of
  Nil -> Cons (key, 1) Nil
  Cons (key', value) xss -> if key == key'
                              then Cons (key, value + 1) xss
                              else Cons (key', value) (increment key xss)

compute_histogram : List Int -> List (Int, Int)
compute_histogram xs = case xs of
  Nil -> Nil
  Cons value xss -> increment value (compute_histogram xss)

iota_tr : Int -> List Int -> List Int
iota_tr a xs = if a == 0 then xs else iota_tr (a - 1) (Cons a xs)

iota : Int -> List Int
iota n = iota_tr n Nil

append : List a -> List a -> List a
append xs ys = case xs of
  Nil -> ys
  (Cons x xss) -> Cons x (append xss ys)

repeat : Int -> List a -> List a
repeat n xs = if n == 0 then Nil else append xs (repeat (n - 1) xs)

benchmark : Bool -> Int -> Int -> ()
benchmark verbose repe size =
  let _          = print_int size in
  let input      = repeat repe (iota size) in
  let _          = record_start_time () in
  let histogram1 = compute_histogram input in
  let _          = record_end_time () in
  let _          = if verbose then print_tupleIntIntList histogram1 else () in
  let _          = print_elapsed_time () in
  let _          = print_int size in
  let _          = record_start_time () in
  let histogram2 = create_histogram size input in
  let _          = record_end_time () in
  let _          = if verbose then print_tupleIntIntList histogram2 else () in
  print_elapsed_time ()

main = benchmark False 3 1173
