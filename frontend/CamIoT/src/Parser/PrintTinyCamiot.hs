{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintTinyCamiot.
--   Generated by the BNF converter.

module Parser.PrintTinyCamiot where

import Parser.AbsTinyCamiot
    ( PatMatch(..),
      Pat(..),
      Const(..),
      RelOp(..),
      MulOp(Div, Times),
      AddOp(Minus, Plus),
      Exp(..),
      Type(..),
      ConstructorDec(..),
      Def(..),
      UIdent(..),
      Ident(..) )
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print () where
  prt _ x = doc (shows x)

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Ident where
  prt _ (Ident i) = doc $ showString i
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print UIdent where
  prt _ (UIdent i) = doc $ showString i

instance Print a => Print [Def a] where
  prt = prtList

instance Print a => Print (Def a) where
  prt i e = case e of
    DEquation a id pats exp -> prPrec i 0 (concatD [prt 0 id, prt 0 pats, doc (showString "="), prt 0 exp, doc (showString " : "), prt 0 a])
    DTypeSig id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
    DDataDec uident ids constructordecs -> prPrec i 0 (concatD [doc (showString "data"), prt 0 uident, prt 0 ids, doc (showString "where"), doc (showString "{"), prt 0 constructordecs, doc (showString "}")])
    DMutRec tydefs -> prtList 0 $ concatMap (\(ty,defs) -> ty:defs) tydefs
    DForeignType id type_ -> prPrec i 0 (concatD [ doc (showString "foreign import")
                                                 , prt 0 id
                                                 , doc (showString ":"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print ConstructorDec where
  prt i e = case e of
    ConstDec uident type_ -> prPrec i 0 (concatD [prt 0 uident, doc (showString ":"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [ConstructorDec] where
  prt = prtList

instance Print [Ident] where
  prt = prtList

instance Print Type where
  prt i e = case e of
    TLam type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "->"), prt 0 type_2])
    TVar id -> prPrec i 1 (concatD [prt 0 id])
    TNil -> prPrec i 2 (concatD [doc (showString "()")])
    TAdt uident types -> prPrec i 2 (concatD [prt 0 uident, prt 1 types])
    TTup tuptypes -> prPrec i 1 (concatD ([doc (showString "(")] ++ printTups tuptypes ++ [doc (showString ")")]))
    TBool -> prPrec i 2 (concatD [doc (showString "Bool")])
    TInt -> prPrec i 2 (concatD [doc (showString "Int")])
    TFloat -> prPrec i 2 (concatD [doc (showString "Float")])
    where
        printTups [] = []
        printTups [x] = [prt 0 x]
        printTups (x:y:xs) = [prt 0 x, doc (showString ",")] ++ printTups (y:xs) 
  prtList n [] = concatD []
  prtList n (x:xs) = concatD [prt n x, prt n xs]


instance Print [Type] where
  prt = prtList

instance Print a => Print (Exp a) where
  prt i e = case e of
    ECase a exp patmatchs -> prPrec i 0 (concatD [doc (showString "case"), prt 0 exp, doc (showString "of"), doc (showString "{"), prt 0 patmatchs, doc (showString "}")])
    ELet a pat exp1 exp2 -> prPrec i 0 (concatD [doc (showString "let"), prt 0 pat, doc (showString "="), prt 0 exp1, doc (showString "in"), prt 0 exp2])
    ELetR a pat exp1 exp2 -> prPrec i 0 (concatD [doc (showString "letrec"), prt 0 pat, doc (showString "="), prt 0 exp1, doc (showString "in"), prt 0 exp2])
    ELam a pat exp -> prPrec i 0 (concatD [doc (showString "\\"), prt 0 pat, doc (showString "->"), prt 0 exp])
    EIf a exp1 exp2 exp3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp1, doc (showString "then"), prt 0 exp2, doc (showString "else"), prt 0 exp3])
    EApp a exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, prt 7 exp2])
    EOr a exp1 exp2 -> prPrec i 1 (concatD [prt 2 exp1, doc (showString "||"), prt 1 exp2])
    EAnd a exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "&&"), prt 2 exp2])
    ERel a exp1 relop exp2 -> prPrec i 3 (concatD [prt 3 exp1, prt 0 relop, prt 4 exp2])
    EAdd a exp1 addop exp2 -> prPrec i 4 (concatD [prt 4 exp1, prt 0 addop, prt 5 exp2])
    EMul a exp1 mulop exp2 -> prPrec i 5 (concatD [prt 5 exp1, prt 0 mulop, prt 6 exp2])
    ETup a tupexps -> prPrec i 7 (concatD ([doc (showString "(")] ++ printTups tupexps ++ [doc (showString ")")]))
    ENot a exp -> prPrec i 6 (concatD [doc (showString "!"), prt 7 exp])
    EVar a id -> prPrec i 7 (concatD [prt 0 id])
    EUVar a uident -> prPrec i 7 (concatD [prt 0 uident])
    EConst a const -> prPrec i 7 (concatD [prt 0 const])
    where
        printTups [] = []
        printTups [x] = [prt 0 x]
        printTups (x:y:xs) = [prt 0 x, doc (showString ",")] ++ printTups (y:xs) 

  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AddOp a) where
  prt i e = case e of
    Plus _ -> prPrec i 0 (concatD [doc (showString "+")])
    Minus _ -> prPrec i 0 (concatD [doc (showString "-")])
    
instance Print (MulOp a) where
  prt i e = case e of
    Times _ -> prPrec i 0 (concatD [doc (showString "*")])
    Div _ -> prPrec i 0 (concatD [doc (showString "/")])
    
instance Print (RelOp a) where
  prt i e = case e of
    LTC _ -> prPrec i 0 (concatD [doc (showString "<")])
    LEC _ -> prPrec i 0 (concatD [doc (showString "<=")])
    GTC _ -> prPrec i 0 (concatD [doc (showString ">")])
    GEC _ -> prPrec i 0 (concatD [doc (showString ">=")])
    EQC _ -> prPrec i 0 (concatD [doc (showString "==")])
    
instance Print a => Print [Exp a] where
  prt = prtList

instance Print Const where
  prt i e = case e of
    CInt n -> prPrec i 0 (concatD [prt 0 n])
    CFloat d -> prPrec i 0 (concatD [prt 0 d])
    CTrue -> prPrec i 0 (concatD [doc (showString "True")])
    CFalse -> prPrec i 0 (concatD [doc (showString "False")])
    CNil -> prPrec i 0 (concatD [doc (showString "()")])

instance Print (Pat a) where
  prt i e = case e of
    PConst _ const -> prPrec i 0 (concatD [prt 0 const])
    PVar _ id -> prPrec i 0 (concatD [prt 0 id])
    PZAdt _ uident -> prPrec i 0 (concatD [prt 0 uident])
    PNAdt _ uident adtpats -> prPrec i 0 (concatD [doc (showString "("), prt 0 uident, prt 0 adtpats, doc (showString ")")])
    PWild _ -> prPrec i 0 (concatD [doc (showString "_")])
    PNil _ -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])
    PTup _ tuppats -> prPrec i 1 (concatD [doc (showString "("), prt 0 tuppats, doc (showString ")")])
    PLay _ id pat -> prPrec i 2 (concatD [prt 0 id, doc (showString "as"), prt 0 pat])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Pat a] where
  prt = prtList

instance Print a => Print (PatMatch a) where
  prt i e = case e of
    PM pat exp -> prPrec i 0 (concatD [prt 0 pat, doc (showString "->"), prt 0 exp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print a => Print [PatMatch a] where
  prt = prtList
